package Finger

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/imroc/req/v3"
	"github.com/twmb/murmur3"
	"hash"
	"io/ioutil"
	"os"
	"regexp"
	"strings"
	"time"
)

type Web struct {
	proxyUrl  string
	userAgent string
	timeOut   time.Duration
	headers   map[string]string
	url       string
	data
}

type fingerprint struct {
	Cms      string   `json:"cms"`
	Method   string   `json:"method"`
	Location string   `json:"location"`
	Keyword  []string `json:"keyword"`
}

type data struct {
	Fingerprints []fingerprint `json:"fingerprint"`
}

func (web *Web) SetUrl(url string) *Web {
	web.url = url
	return web
}

func (web *Web) SetProxyUrl(proxyUrl string) *Web {
	web.proxyUrl = proxyUrl
	return web
}

func (web *Web) SetUserAgent(userAgent string) *Web {
	web.userAgent = userAgent
	return web
}

func (web *Web) SetTimeout(timeout time.Duration) *Web {
	web.timeOut = timeout
	return web
}

func (web *Web) SetHeaders(headers map[string]string) *Web {
	web.headers = headers
	return web
}

func (web *Web) checkParameters() {
	if web.userAgent == "" {
		web.userAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
	}
}

func mmh3Hash32(raw []byte) string {
	var h32 hash.Hash32 = murmur3.New32()
	_, err := h32.Write([]byte(raw))
	if err == nil {
		return fmt.Sprintf("%d", int32(h32.Sum32()))
	} else {
		//log.Println("favicon mmh3Hash32 error:", err)
		return "0"
	}
}

func standBase64(braw []byte) []byte {
	bckd := base64.StdEncoding.EncodeToString(braw)
	var buffer bytes.Buffer
	for i := 0; i < len(bckd); i++ {
		ch := bckd[i]
		buffer.WriteByte(ch)
		if (i+1)%76 == 0 {
			buffer.WriteByte('\n')
		}
	}
	buffer.WriteByte('\n')
	return buffer.Bytes()

}

func (web *Web) faviconHash() string {
	var url string
	if strings.Contains(web.url, "favicon.ico") {
		url = web.url
	} else {
		url = web.url + "/favicon.ico"
	}
	resp, err := req.C().SetProxyURL(web.proxyUrl).SetUserAgent(web.userAgent).SetTimeout(web.timeOut).R().SetHeaders(web.headers).Get(url)
	if err != nil {
		return "0"
	}
	defer resp.Body.Close()
	if resp.StatusCode == 200 {
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			//log.Println("favicon file read error: ", err)
			return "0"
		}
		return mmh3Hash32(standBase64(body))
	} else {
		return "0"
	}
}

func (web *Web) getTitle(resp string) string {
	if strings.Contains(resp, "<title>") {
		findString := regexp.MustCompile(`<title>(.*)</title>`).FindAllStringSubmatch(resp, -1)
		return findString[0][1]
	} else {
		return ""
	}
}

func (web *Web) loadRules() error {
	file, err := os.ReadFile("Finger\\source\\finger.json")
	err = json.Unmarshal(file, &web.data)
	if err != nil {
		return err
	}
	return nil
}

func (web *Web) ScanAllExploits() (string, error) {
	err := web.loadRules()
	if err != nil {
		return "", err
	}
	web.checkParameters()
	resp, err := req.C().SetProxyURL(web.proxyUrl).SetUserAgent(web.userAgent).SetTimeout(web.timeOut).R().SetHeaders(web.headers).Get(web.url)
	if err != nil {
		return "", err
	}
	favHash := web.faviconHash()
	for _, v := range web.Fingerprints {
		if v.Location == "body" {
			if v.Method == "faviconhash" {
				for _, k := range v.Keyword {
					if k == favHash {
						return fmt.Sprintf("[ %s | %s | %s | %d | %d | %s ]", resp.Response.Request.URL, v.Cms, resp.GetHeader("server"), resp.StatusCode, len(resp.String()), web.getTitle(resp.String())), nil
					}
				}
			}

			if v.Method == "keyword" {
				flag := true
				for i := 0; i < len(v.Keyword); i++ {
					if !strings.Contains(resp.String(), v.Keyword[i]) {
						flag = false
					}
				}
				if flag {
					return fmt.Sprintf("[ %s | %s | %s | %d | %d | %s ]", resp.Response.Request.URL, v.Cms, resp.GetHeader("server"), resp.StatusCode, len(resp.String()), web.getTitle(resp.String())), nil
				} else {
					continue
				}
			}
		}
	}

	return fmt.Sprintf("[ %s | %s | %s | %d | %d | %s ]", resp.Response.Request.URL, "", resp.GetHeader("server"), resp.StatusCode, len(resp.String()), web.getTitle(resp.String())), nil
}
