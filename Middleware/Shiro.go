package Middleware

import (
	"time"
)

type Shiro struct {
	url       string
	proxyUrl  string
	userAgent string
	timeOut   time.Duration
	headers   map[string]string
	threads   int
}

func (shiro *Shiro) SetUrl(url string) *Shiro {
	shiro.url = url
	return shiro
}

func (shiro *Shiro) SetProxyUrl(proxyUrl string) *Shiro {
	shiro.proxyUrl = proxyUrl
	return shiro
}

func (shiro *Shiro) SetUserAgent(userAgent string) *Shiro {
	shiro.userAgent = userAgent
	return shiro
}

func (shiro *Shiro) SetTimeout(timeout time.Duration) *Shiro {
	shiro.timeOut = timeout
	return shiro
}

func (shiro *Shiro) SetHeaders(headers map[string]string) *Shiro {
	shiro.headers = headers
	return shiro
}

func (shiro *Shiro) setThreads(threads int) *Shiro {
	shiro.threads = threads
	return shiro
}

func (shiro *Shiro) checkParameters() {
	if shiro.threads <= 0 {
		shiro.threads = 1
	}

	if shiro.userAgent == "" {
		shiro.userAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
	}
}
