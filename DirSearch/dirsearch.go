package DirSearch

import (
	"fmt"
	"github.com/imroc/req/v3"
	"strings"
	"sync"
	"time"
)

type DirSearch struct {
	wg        sync.WaitGroup
	threads   int
	userAgent string
	proxyUrl  string
	timeOut   time.Duration
	headers   map[string]string
	rules     []string
	dict      []string
	url       string
}

func (dirsearch *DirSearch) SetUrl(url string) *DirSearch {
	dirsearch.url = url
	return dirsearch
}

func (dirsearch *DirSearch) SetProxyUrl(proxyUrl string) *DirSearch {
	dirsearch.proxyUrl = proxyUrl
	return dirsearch
}

func (dirsearch *DirSearch) SetUserAgent(userAgent string) *DirSearch {
	dirsearch.userAgent = userAgent
	return dirsearch
}

func (dirsearch *DirSearch) SetTimeout(timeout time.Duration) *DirSearch {
	dirsearch.timeOut = timeout
	return dirsearch
}

func (dirsearch *DirSearch) SetHeaders(headers map[string]string) *DirSearch {
	dirsearch.headers = headers
	return dirsearch
}

func (dirsearch *DirSearch) setThreads(threads int) *DirSearch {
	dirsearch.threads = threads
	return dirsearch
}

func (dirsearch *DirSearch) checkParameters() {
	if dirsearch.threads <= 0 {
		dirsearch.threads = 1
	}

	if dirsearch.userAgent == "" {
		dirsearch.userAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
	}
}

func (dirsearch *DirSearch) PrintResult() {

}

// backFileScanRules 备份文件扫描规则
func (dirsearch *DirSearch) backFileScanRules() []string {
	// 填充规则
	dirsearch.rules = []string{".zip", ".rar", ".tar.gz", ".tgz", ".tar.bz2", ".tar", ".jar", ".war", ".7z", ".bak", ".sql", ".gz", ".sql.gz", ".tar.tgz"}
	dirsearch.dict = []string{"1", "127.0.0.1", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "admin", "archive", "asp", "aspx", "auth", "back", "backup", "backups", "bak", "bbs", "bin", "clients", "code", "com", "customers", "dat", "data", "database", "db", "dump", "engine", "error_log", "faisunzip", "files", "forum", "home", "html", "index", "joomla", "js", "jsp", "local", "localhost", "master", "media", "members", "my", "mysql", "new", "old", "orders", "php", "sales", "site", "sql", "store", "tar", "test", "user", "users", "vb", "web", "website", "wordpress", "wp", "www", "wwwroot", "root", "log"}
	var urlPath []string
	temp := dirsearch.url
	temp = strings.TrimSpace(temp)
	temp = strings.ReplaceAll(temp, "http://", "")
	temp = strings.ReplaceAll(temp, "https://", "")
	temp = strings.ReplaceAll(temp, "/", "")
	split := strings.Split(temp, ".")

	for i := 0; i < len(split); i++ {
		var zi1 string
		var zi2 string
		var zi3 string
		zi1 = split[i]
		zi2 = split[i]
		zi3 = split[i]

		dirsearch.dict = append(dirsearch.dict, zi1)
		for j := i + 1; j < len(split); j++ {
			zi1 += split[j]
			zi2 += "." + split[j]
			zi3 += "_" + split[j]
			dirsearch.dict = append(dirsearch.dict, zi1)
			dirsearch.dict = append(dirsearch.dict, zi2)
			dirsearch.dict = append(dirsearch.dict, zi3)
		}

		for _, dict := range dirsearch.dict {
			for _, rule := range dirsearch.rules {
				urlPath = append(urlPath, fmt.Sprintf("%s/%s%s", dirsearch.url, dict, rule))
			}
		}
	}
	return urlPath
}

// BakFileScan 备份文件扫描
func (dirsearch *DirSearch) BakFileScan() (results chan string, errs chan error) {
	results = make(chan string, 10)
	errs = make(chan error, 10)
	urlPath := dirsearch.backFileScanRules()

	go func() {
		for _, url := range urlPath {
			go func() {
				dirsearch.wg.Add(1)
				result, err := dirsearch.scan(url)
				if err != nil {
					errs <- err
					dirsearch.wg.Done()
				} else {
					if result != "" {
						results <- result
						dirsearch.wg.Done()
					}
				}
			}()
		}
		dirsearch.wg.Wait()
		<-time.NewTicker(time.Second * 3).C
		close(results)
		close(errs)
	}()
	return results, errs
}

func (dirsearch *DirSearch) scan(url string) (string, error) {

	if dirsearch.proxyUrl != "" {
		resp, err := req.C().SetProxyURL(dirsearch.proxyUrl).SetUserAgent(dirsearch.userAgent).SetTimeout(dirsearch.timeOut).R().SetHeaders(dirsearch.headers).Get(url)
		if err != nil {
			return "", err
		}
		if resp.StatusCode == 200 || resp.StatusCode == 403 {
			return url, nil
		} else {
			return fmt.Sprintf("%s 不存在", url), nil
		}
	} else {
		resp, err := req.C().SetUserAgent(dirsearch.userAgent).SetTimeout(dirsearch.timeOut).R().SetHeaders(dirsearch.headers).Get(url)
		if err != nil {
			return "", err
		}
		if resp.StatusCode == 200 || resp.StatusCode == 403 {
			return url, nil
		} else {
			return fmt.Sprintf("%s 不存在", url), nil
		}
	}
}

// ScanAllExploits 完整性扫描
func (dirsearch *DirSearch) ScanAllExploits() (results chan string, errs chan error) {
	return nil, nil
}
